{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devik\\\\OneDrive\\\\Desktop\\\\mini project\\\\Mini-project\\\\Frontend\\\\front-end-main\\\\src\\\\components\\\\Chatbot\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Chatbot.css\"; // Ensure you have this CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n\n  // Function to add messages to the chat\n  const addMessage = (text, sender) => {\n    setMessages(prevMessages => [...prevMessages, {\n      text,\n      sender\n    }]);\n  };\n\n  // Function to handle the word-by-word typing effect\n  const typeWriter = (words, index = 0) => {\n    if (index < words.length) {\n      setMessages(prevMessages => {\n        const updatedMessages = [...prevMessages];\n        updatedMessages[updatedMessages.length - 1].text += (index === 0 ? \"\" : \" \") + words[index];\n        return updatedMessages;\n      });\n      setTimeout(() => typeWriter(words, index + 1), 100); // Adjust the speed here\n    }\n  };\n\n  // Function to send a message\n  const sendMessage = async () => {\n    if (!userInput) return;\n    addMessage(userInput, \"user\");\n    setUserInput(\"\");\n    try {\n      const response = await fetch(\"/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          prompt: userInput\n        })\n      });\n      const data = await response.json();\n      if (data.reply) {\n        addMessage(\"\", \"bot\"); // Add an empty message for the bot\n        const words = data.reply.split(\" \"); // Split the response into words\n        typeWriter(words); // Start the typing effect\n      } else {\n        addMessage(\"Error: \" + data.error, \"bot\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      addMessage(\"Failed to connect to the server.\", \"bot\");\n    }\n  };\n\n  // Handle Enter key press to send message\n  const handleKeyPress = event => {\n    if (event.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"input-container\",\n      className: \"d-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"user-input\",\n        className: \"form-control\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type a message...\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"send-btn\",\n        className: \"btn\",\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"1zGRC38DTEORNFfajD4oL7sdkj8=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","userInput","setUserInput","addMessage","text","sender","prevMessages","typeWriter","words","index","length","updatedMessages","setTimeout","sendMessage","response","fetch","method","headers","body","JSON","stringify","prompt","data","json","reply","split","error","console","handleKeyPress","event","key","id","children","map","message","className","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onKeyPress","placeholder","autoFocus","onClick","_c","$RefreshReg$"],"sources":["C:/Users/devik/OneDrive/Desktop/mini project/Mini-project/Frontend/front-end-main/src/components/Chatbot/Chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Chatbot.css\"; // Ensure you have this CSS for styling\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [userInput, setUserInput] = useState(\"\");\r\n\r\n  // Function to add messages to the chat\r\n  const addMessage = (text, sender) => {\r\n    setMessages((prevMessages) => [...prevMessages, { text, sender }]);\r\n  };\r\n\r\n  // Function to handle the word-by-word typing effect\r\n  const typeWriter = (words, index = 0) => {\r\n    if (index < words.length) {\r\n      setMessages((prevMessages) => {\r\n        const updatedMessages = [...prevMessages];\r\n        updatedMessages[updatedMessages.length - 1].text += (index === 0 ? \"\" : \" \") + words[index];\r\n        return updatedMessages;\r\n      });\r\n      setTimeout(() => typeWriter(words, index + 1), 100); // Adjust the speed here\r\n    }\r\n  };\r\n\r\n  // Function to send a message\r\n  const sendMessage = async () => {\r\n    if (!userInput) return;\r\n\r\n    addMessage(userInput, \"user\");\r\n    setUserInput(\"\");\r\n\r\n    try {\r\n      const response = await fetch(\"/chat\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ prompt: userInput }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (data.reply) {\r\n        addMessage(\"\", \"bot\"); // Add an empty message for the bot\r\n        const words = data.reply.split(\" \"); // Split the response into words\r\n        typeWriter(words); // Start the typing effect\r\n      } else {\r\n        addMessage(\"Error: \" + data.error, \"bot\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      addMessage(\"Failed to connect to the server.\", \"bot\");\r\n    }\r\n  };\r\n\r\n  // Handle Enter key press to send message\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"chat-container\">\r\n      <div id=\"messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.sender}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div id=\"input-container\" className=\"d-flex\">\r\n        <input\r\n          type=\"text\"\r\n          id=\"user-input\"\r\n          className=\"form-control\"\r\n          value={userInput}\r\n          onChange={(e) => setUserInput(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n          placeholder=\"Type a message...\"\r\n          autoFocus\r\n        />\r\n        <button id=\"send-btn\" className=\"btn\" onClick={sendMessage}>\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}